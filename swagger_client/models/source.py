# coding: utf-8

"""
    The Earth Observatory Natural Event Tracker ([EONET](https://eonet.sci.gsfc.nasa.gov/what-is-eonet))

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Source(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'source': 'str',
        'link': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'source': 'source',
        'link': 'link'
    }

    def __init__(self, id=None, title=None, source=None, link=None):  # noqa: E501
        """Source - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._title = None
        self._source = None
        self._link = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if source is not None:
            self.source = source
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this Source.  # noqa: E501

        unique id of source type  # noqa: E501

        :return: The id of this Source.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Source.

        unique id of source type  # noqa: E501

        :param id: The id of this Source.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Source.  # noqa: E501

        title of this source  # noqa: E501

        :return: The title of this Source.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Source.

        title of this source  # noqa: E501

        :param title: The title of this Source.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def source(self):
        """Gets the source of this Source.  # noqa: E501

        homepage URL for this source  # noqa: E501

        :return: The source of this Source.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Source.

        homepage URL for this source  # noqa: E501

        :param source: The source of this Source.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def link(self):
        """Gets the link of this Source.  # noqa: E501

        The full link to the API endpoint for this specific source, which is the same as the Events API endpoint only filtered to return only events from this source.  # noqa: E501

        :return: The link of this Source.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Source.

        The full link to the API endpoint for this specific source, which is the same as the Events API endpoint only filtered to return only events from this source.  # noqa: E501

        :param link: The link of this Source.  # noqa: E501
        :type: str
        """

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Source, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Source):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
